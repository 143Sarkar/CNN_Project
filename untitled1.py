# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16kYW7vn4WfROVZuhKKSS6QLZMAN5pO0m
"""

import tensorflow as tf
from IPython.display import HTML
from tensorflow.keras import models,layers
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

tf.config.list_physical_devices('CPU')

!unzip -q ./{archive}.zip -d ~/Dataset

!unzip ./archive.zip -d ./Dog\ Image\ Model

dataset = tf.keras.preprocessing.image_dataset_from_directory(
    './Dog Image Model/Mini Dog Breed Data',
    shuffle = True,
    image_size = (256,256),
    batch_size = 32
)

class_names = dataset.class_names
print(f"The different classes in the dataset are :\n {class_names}")

#--Confirming the length of the data
print(f"The length of the data : {len(dataset)} \n The actual length of the data : {len(dataset)*32}")

#--Plotting the various figure
plt.figure(figsize = (10,10))
for image_batch, label_batch in dataset.take(2): #--each time it will print new one because it is shuffling
    for i in range(12):
        ax = plt.subplot(3,4,i+1)
        plt.imshow(image_batch[i].numpy().astype('uint8'))
        plt.title(class_names[label_batch[i]])
        plt.axis('off')

#--Getting the general idea of the dataset
for image_batch, label_batch in dataset.take(1): #--this dataset.take(1) only takes one batch
    print(image_batch.shape)
    print(label_batch.numpy())

#--UDF for getting the different parts from data
def get_partition_df(df, train_size = 0.8 , test_size = 0.1, valid_size = 0.1, shuffle = True, shuffle_size = 10000):
    if shuffle:
        df = df.shuffle(shuffle_size, seed = 12)
    val_1 = round(len(df)*train_size)
    val_2 = round(len(df)*test_size)
    train_data = df.take(val_1)
    test_data = df.skip(val_1)
    valid_data = test_data.take(val_2)
    test_data = test_data.skip(val_2)
    return train_data,test_data,valid_data

train_data,test_data,valid_data = get_partition_df(dataset)

#--Cache and prefetch
train_data = train_data.cache().shuffle(1000).prefetch(buffer_size = tf.data.AUTOTUNE)
test_data = test_data.cache().shuffle(1000).prefetch(buffer_size = tf.data.AUTOTUNE)
valid_data = valid_data.cache().shuffle(1000).prefetch(buffer_size = tf.data.AUTOTUNE)

#--Resizing and Rescaling
resize_and_rescale = tf.keras.Sequential([
    layers.experimental.preprocessing.Resizing(256,256),
    layers.experimental.preprocessing.Rescaling(1.0/256)

])

#--Image Auguentation --> To make a robust data
data_augumentation = tf.keras.Sequential([
    layers.experimental.preprocessing.RandomFlip('horizontal_and_vertical'),
    layers.experimental.preprocessing.RandomRotation(0.2)
])

#--Building a simple CNN model
n_classes = 5
input_shape = (32, 256,256, 3)
model = models.Sequential([
    resize_and_rescale,
    data_augumentation,
    layers.Conv2D(32, (3,3), activation = 'relu', input_shape = input_shape),
    layers.MaxPool2D((2,2)),
    layers.Conv2D(64, kernel_size = (3,3), activation = 'relu'),
    layers.MaxPool2D((2,2)),
    layers.Conv2D(64, (3,3), activation = 'relu'),
    layers.MaxPool2D((2,2)),
    layers.Conv2D(64, (3,3), activation = 'relu'),
    layers.MaxPool2D((2,2)),
    layers.Conv2D(64, (3,3), activation = 'relu'),
    layers.MaxPool2D((2,2)),
    layers.Conv2D(64, (3,3), activation = 'relu'),
    layers.MaxPool2D((2,2)),
    layers.Flatten(),
    layers.Dense(64, activation = 'relu'),
    layers.Dense(n_classes , activation = 'softmax')
])

model.build(input_shape = input_shape)

#--Model Summary
model.summary()

#--Compiling the model
model.compile(
    optimizer = 'adam',
    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits = False),
    metrics = ['accuracy']
)

#--Fitting the model
history = model.fit(
    train_data,
    epochs = 10,
    batch_size = 32,
    verbose = 1,
    validation_data = valid_data
)

#--Getting the scores
scores = model.evaluate(test_data)
print(f"Final Loss : {scores[0]}  \n Final Accuracy : {scores[1]}")

def predict(model, img):
    img_array = tf.keras.preprocessing.image.img_to_array(images[i].numpy())
    img_array = tf.expand_dims(img_array, 0)

    predictions = model.predict(img_array)

    predicted_class = class_names[np.argmax(predictions[0])]
    confidence = round(100 * (np.max(predictions[0])), 2)
    return predicted_class, confidence

#--Visualising the result
plt.figure(figsize=(10,10))
for images, labels in test_data.take(1):
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().astype("uint8"))

        predicted_class, confidence = predict(model, images[i].numpy())
        actual_class = class_names[labels[i]]

        plt.title(f"Actual: {actual_class},\n Predicted: {predicted_class}.\n Confidence: {confidence}%")

        plt.axis("off")

